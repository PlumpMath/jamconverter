Possible ways to split up tasks at hackweek:
- embed mono in jam,  write icalls for builtin rules
- make jam be able to output all the builtin rules that get called, so we can compare a new impl against an old one.
- work on the actual converter
- take converter output, and start a "for experiment only" refactoring session on what we could clean it up into
- write alternative to C.Application  that allows for compiler toolchain / architecture to be passed in. I'm
  thinking something like "new CppProgram("myprogramname", new MSVCToolChain(Architecture.x64));"
- write highlevel c# types that would build upon a C.Application alternative. (new UnityPlayer() { EnableAsserts = true };)




Tasklist for the actual converter:

ï»¿easy stuff:
* ?=
* () in conditions
* && || in conditions
* !=
* quote \\ character in lexer
* rules that specify no arguments, but use $(<) and $(>) for arguments one and two.
* remaining variable expansion modifiers
* implement W32_GETREG
* implement GroupByVar

hard stuff:

include statement
splitting includes etc over multiple c# files

variable scoping:
* on {} support in converter
* local
